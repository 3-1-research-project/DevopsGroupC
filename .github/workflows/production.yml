name: Production Deployment #shoutout to the exercises session

on:
  pull_request:
    types:
      - auto_merge_enabled
    # Run workflow every time something is pushed to the main branch
    branches:
      - main
  workflow_dispatch:

# The following secrets are required from the repository's settings:
# https://github.com/your_username/itu-minitwit-ci/settings/secrets/actions
# DOCKER_USERNAME
# DOCKER_PASSWORD
# SSH_USER
# SSH_KEY
# SSH_HOST

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push csharptwitimage
        uses: docker/build-push-action@v2
        with:
          context: ./csharp-minitwit
          file: ./csharp-minitwit/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/csharptwitimage:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/csharptwitimage:webbuildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/csharptwitimage:webbuildcache,mode=max

      #TODO: Add / adjust tests from py api maybe?

      # - name: Test minitwit
      #   run: |
      #     docker build -t $DOCKER_USERNAME/minitwittestimage -f Dockerfile-minitwit-tests .
      #     yes 2>/dev/null | docker-compose up -d
      #     docker run --rm --network=itu-minitwit-network $DOCKER_USERNAME/minitwittestimage
      #   env:
      #     DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/production_key
          chmod 600 ~/.ssh/production_key
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
      
      - name: Copy files to server
        # Updating all files on remote server from the remote_files
        run: >
          scp -i ~/.ssh/production_key -o StrictHostKeyChecking=no
          ./csharp-minitwit/remote_files/* $SSH_USER@$SSH_HOST:/csharp-minitwit
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}

      - name: Deploy to server
        # Calls deploy.sh to pull csharp-minitwit image from Docker Hub and spin container up.
        run: |
            ssh -i ~/.ssh/staging_key -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << 'EOF'
              export ConnectionStrings__DefaultConnection=${{ secrets.DB_CONNECTIONSTRING_STAGING }}
              cd /csharp-minitwit
              printenv
              docker compose -f docker-compose.yml pull
              docker compose -f docker-compose.yml up -d
            EOF
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
