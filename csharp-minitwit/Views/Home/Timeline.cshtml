@model UserTimelineViewModel
@using csharp_minitwit.Models.ViewModels;
@using csharp_minitwit.Utils;

@inject IHttpContextAccessor _httpContext;

@{
    Layout = "~/Views/Home/Layout.cshtml";
    ViewData["Title"] = "Timeline";
    var actionName = ViewContext.RouteData.Values["action"].ToString();
    var userId = _httpContext.HttpContext.Session.GetInt32("user_id");
    var username = _httpContext.HttpContext.Session.GetString("username");
}

<h2>
    
    @{
        if (actionName== "PublicTimeline")
        {
            <text>Public Timeline</text>
        }
        else if (actionName == "UserTimeline")
        {
            <text>@Model.ProfileUser.Username's Timeline</text>
        }
        else
        {
            <text>My Timeline</text>
        }
    }
</h2>
@if (ViewBag.messageRecorded != null && ViewBag.messageRecorded) 
{
    <div class="alert alert-success" role="alert">
        Your message was recorded
    </div>
}
@if (ViewBag.newlyLoggedIn != null && ViewBag.newlyLoggedIn) 
{
    <div class="alert alert-success" role="alert">
        You were logged in 
    </div>
}
@if (ViewBag.newlyLoggedOut != null && ViewBag.newlyLoggedOut) 
{
    <div class="alert alert-success" role="alert">
        You were logged out
    </div>
}



@if (Model.CurrentUserId.HasValue)
{
    @if (actionName == "UserTimeline")
    {
        <div class="followstatus">
            @using System.Security.Claims

            @if (Model.CurrentUserId == Model.ProfileUser.UserId)
            {
                <text>This is you!</text>
            }
            else if (Model.Followed)
            {
                var lookingAtUser = ViewContext.RouteData.Values["username"].ToString();

                <text>You are now following &#34;@lookingAtUser&#34;
                    <form action="/@Model.ProfileUser.Username/unfollow" method="get" class="inline-form">
                    <input type="hidden" name="username" value="@Model.ProfileUser.Username" />
                     <button type="submit" class="unfollow-link">Unfollow user</button>
                    </form>
                </text>
            }
            else if (ViewBag.message != null)
            {
                var lookingAtUser = ViewContext.RouteData.Values["username"].ToString();

                <text>You are no longer following &#34;@lookingAtUser&#34;
                    <form action="/@Model.ProfileUser.Username/follow" method="get" class="inline-form">
                        <input type="hidden" name="username" value="@Model.ProfileUser.Username" />
                        <button type="submit" class="unfollow-link">Follow user</button>
                    </form>
                </text>
            }
            else
            {
                var lookingAtUser = ViewContext.RouteData.Values["username"].ToString();

                <text>You are not yet following this user.
                    <form action="/@Model.ProfileUser.Username/follow" method="get" class="inline-form">
                        <input type="hidden" name="username" value="@Model.ProfileUser.Username" />
                     <button type="submit" class="unfollow-link">Follow user</button>
                    </form>
                </text>
            }
        </div>
    }
    else if (actionName == "Timeline")
    {
        <div class="twitbox">
            <h3>What's on your mind @username </h3>
            <form asp-action="AddMessage" method="post">
                <p><input type="text" name="text" size="60" /><input type="submit" value="Share" /></p>
            </form>
        </div>
}}

<ul class="messages">
    @if (Model.MessagesWithAuthor.Any())
    {
        @foreach (var messagesWithAuthor in Model.MessagesWithAuthor)
        {
            var gravatarUrl = GravatarHelper.GetGravatarUrl(messagesWithAuthor.Author.Email, 48);
            <li>
                <img src="@gravatarUrl" alt="Gravatar">
                <p>
                    <strong><a href="@Url.Action("UserTimeline", new { username = messagesWithAuthor.Author.Username })">@messagesWithAuthor.Author.Username</a></strong>
                    @messagesWithAuthor.Message.Text
                    <small>&mdash; @DateTimeOffset.FromUnixTimeSeconds(messagesWithAuthor.Message.PubDate).ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")</small>
                </p>
            </li>
        }
    }
    else
    {
        <li><em>There's no message so far.</em></li>
    }

</ul>

  