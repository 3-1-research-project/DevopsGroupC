// REPLACE '********' where needed:


export DIGITAL_OCEAN_TOKEN='********'

export DIGITALOCEAN_PRIVATE_NETWORKING=true
export DROPLETS_API="https://api.digitalocean.com/v2/droplets"
export BEARER_AUTH_TOKEN="Authorization: Bearer $DIGITAL_OCEAN_TOKEN"
export JSON_CONTENT="Content-Type: application/json"


CONFIG='{"name":"preproduction-swarm-manager","tags":["preproduction"], "region":"fra1",
	"size":"s-1vcpu-1gb", "image":"docker-20-04",
	"ssh_keys":["********'"]}'

SWARM_MANAGER_ID=$(curl -X POST "$DROPLETS_API" -d "$CONFIG"\
	-H "$BEARER_AUTH_TOKEN" -H "$JSON_CONTENT"\
	| jq -r .droplet.id ) && sleep 5 && echo $SWARM_MANAGER_ID



export JQFILTER='.droplets | .[] | select (.name == "preproduction-swarm-manager") 
	| .networks.v4 | .[]| select (.type == "public") | .ip_address'


SWARM_MANAGER_IP=$(curl -s GET "$DROPLETS_API"\
    -H "$BEARER_AUTH_TOKEN" -H "$JSON_CONTENT"\
    | jq -r "$JQFILTER") && echo "SWARM_MANAGER_IP=$SWARM_MANAGER_IP"

// Creating worker nodes
// Worker1
WORKER1_ID=$(curl -X POST "$DROPLETS_API"\
       -d'{"name":"preproduction-worker1","tags":["preproduction"],"region":"fra1",
       "size":"s-1vcpu-1gb","image":"docker-20-04",
       "ssh_keys":["********"]}'\
       -H "$BEARER_AUTH_TOKEN" -H "$JSON_CONTENT"\
       | jq -r .droplet.id )\
       && sleep 3 && echo $WORKER1_ID

export JQFILTER='.droplets | .[] | select (.name == "preproduction-worker1") | .networks.v4 | .[]| select (.type == "public") | .ip_address'


WORKER1_IP=$(curl -s GET "$DROPLETS_API"\
    -H "$BEARER_AUTH_TOKEN" -H "$JSON_CONTENT"\
    | jq -r "$JQFILTER")\
    && echo "WORKER1_IP=$WORKER1_IP"

// Worker2
WORKER2_ID=$(curl -X POST "$DROPLETS_API"\
       -d'{"name":"preproduction-worker2","tags":["preproduction"],"region":"fra1",
       "size":"s-1vcpu-1gb","image":"docker-20-04",
       "ssh_keys":["********"]}'\
       -H "$BEARER_AUTH_TOKEN" -H "$JSON_CONTENT"\
       | jq -r .droplet.id )\
       && sleep 3 && echo $WORKER2_ID

export JQFILTER='.droplets | .[] | select (.name == "preproduction-worker2") | .networks.v4 | .[]| select (.type == "public") | .ip_address'


WORKER2_IP=$(curl -s GET "$DROPLETS_API"\
    -H "$BEARER_AUTH_TOKEN" -H "$JSON_CONTENT"\
    | jq -r "$JQFILTER")\
    && echo "WORKER2_IP=$WORKER2_IP"

// Openning ports on the firewall
ssh root@$SWARM_MANAGER_IP "ufw allow 22/tcp && ufw allow 2376/tcp &&\
ufw allow 2377/tcp && ufw allow 7946/tcp && ufw allow 7946/udp &&\
ufw allow 4789/udp && ufw reload && ufw --force  enable &&\
systemctl restart docker"

ssh root@$WORKER1_IP "ufw allow 22/tcp && ufw allow 2376/tcp &&\
ufw allow 2377/tcp && ufw allow 7946/tcp && ufw allow 7946/udp &&\
ufw allow 4789/udp && ufw reload && ufw --force  enable &&\
systemctl restart docker"

ssh root@$WORKER2_IP "ufw allow 22/tcp && ufw allow 2376/tcp &&\
ufw allow 2377/tcp && ufw allow 7946/tcp && ufw allow 7946/udp &&\
ufw allow 4789/udp && ufw reload && ufw --force  enable &&\
systemctl restart docker"

ssh root@$SWARM_MANAGER_IP "docker swarm init --advertise-addr $SWARM_MANAGER_IP"

WORKER_TOKEN=`ssh root@$SWARM_MANAGER_IP "docker swarm join-token worker -q"`
REMOTE_JOIN_CMD="docker swarm join --token $WORKER_TOKEN $SWARM_MANAGER_IP:2377"

// Adding worker1 and worker2 to the swarm as workers
ssh root@$WORKER1_IP "$REMOTE_JOIN_CMD"
ssh root@$WORKER2_IP "$REMOTE_JOIN_CMD"

// Check availability
ssh root@$SWARM_MANAGER_IP "docker node ls"

export DOCKER_PASSWORD=dockerhub
export DOCKER_USERNAME=aswr
export ConnectionStrings__DefaultConnection='********'


docker service create -p 5000:8080 -e ConnectionStrings__DefaultConnection={$ConnectionStrings__DefaultConnection} --name minitwit aswr/csharptwit-preproduction